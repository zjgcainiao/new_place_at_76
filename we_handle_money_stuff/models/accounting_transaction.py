from .base import models, InternalUser
from .purchase_invoice import PurchaseInvoice

class AccountingTransaction(models.Model):
    id = models.BigAutoField(primary_key=True)
    transaction_id = models.CharField(max_length=30,blank=True,null=True) # This is the transaction id from the bank; or generated by our system
    transaction_date = models.DateField(null=True, blank=True)
    transaction_type = models.CharField(choices=[('ach','ACH'),('personal_check',"Personal Check"),('cashier', 'Cashier Check'),('undefined','Undefined'),('other',"Other")], max_length=50,default='undefined')
    transaction_direction = models.CharField(choices=[('debit', 'Debit'), ('credit', 'Credit')], max_length=50, default='debit')
    purchase_invoice = models.ForeignKey(PurchaseInvoice, on_delete=models.DO_NOTHING, null=True, blank=True)
    the_other_party = models.CharField(max_length=255,null=True, blank=True) # This is the other party involved in the transaction 
    transaction_description = models.TextField(null=True, blank=True)
    transaction_settled_date = models.DateTimeField(null=True, blank=True)
    transaction_account = models.CharField(max_length=255,null=True, blank=True) # the credit or debit account based on the `transaction_direction`
    transaction_status = models.CharField(choices=[('completed', 'Completed'), ('pending', 'Pending'),('voided',"Voided"),('require_attention','Requring Attention')], max_length=50, default='pending')
    amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    created_at = models.DateTimeField(auto_now_add=True, null=True)
    updated_at = models.DateTimeField(auto_now=True, null=True)
    created_by = models.ForeignKey(InternalUser, related_name='accounting_transaction_created_by', on_delete=models.DO_NOTHING, null=True, blank=True)
    updated_by = models.ForeignKey(InternalUser, related_name='accounting_transaction_updated_by', on_delete=models.DO_NOTHING, null=True, blank=True)

    class Meta:
        db_table = 'accounting_transactions'
        ordering = ["-id",'-transaction_date']
        indexes = [
            models.Index(fields=["transaction_type", "transaction_direction", 
                                 "transaction_account"], name="type_direction_account.idx"),
            models.Index(fields=["transaction_date"], name="transaction_date_idx"),
        ]
        permissions = [
            ('view_accounting_transaction', 'Can view Accounting Transaction'),
            ('create_accounting_transaction', 'Can create Accounting Transaction'),
            ('edit_accounting_transaction', 'Can edit Accounting Transaction'),
            ('delete_accounting_transaction', 'Can delete Accounting Transaction'),
        ]